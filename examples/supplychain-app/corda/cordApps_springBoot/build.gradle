apply plugin: 'org.sonarqube'
apply plugin: 'maven-publish'

buildscript { //properties that you need to build the project

    Properties constants = new Properties()
    file("$projectDir/constants.properties").withInputStream { constants.load(it) }

    ext {
        corda_release_group = constants.getProperty("cordaReleaseGroup")
        corda_core_release_group =  constants.getProperty("cordaCoreReleaseGroup")
        corda_release_version = constants.getProperty("cordaVersion")
        corda_core_release_version = constants.getProperty("cordaCoreVersion")
        corda_gradle_plugins_version = constants.getProperty("gradlePluginsVersion")
        kotlin_version = constants.getProperty("kotlinVersion")
        junit_version = constants.getProperty("junitVersion")
        testng_version = constants.getProperty("testngVersion")
        quasar_version = constants.getProperty("quasarVersion")
        quasar_classifier=''
        log4j_version = constants.getProperty("log4jVersion")
        slf4j_version = constants.getProperty("slf4jVersion")
        corda_platform_version = constants.getProperty("platformVersion").toInteger()
        //springboot
        spring_boot_version = '2.0.2.RELEASE'
        spring_boot_gradle_plugin_version = '2.0.2.RELEASE'
        springfox_version = '2.9.2'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'https://download.corda.net/maven/corda-releases' }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_gradle_plugin_version"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.2"
    }
}

allprojects { //Properties that you need to compile your project (The application)
    apply from: "${rootProject.projectDir}/repositories.gradle"
    apply plugin: 'kotlin'

    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven { url 'https://download.corda.net/maven/corda-dependencies' }
        maven { url 'https://jitpack.io' }
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
        kotlinOptions {
            languageVersion = "1.2"
            apiVersion = "1.2"
            jvmTarget = "1.8"
            javaParameters = true   // Useful for reflection.
        }
    }

    jar {
        // This makes the JAR's SHA-256 hash repeatable.
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }
}

apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

sourceSets {
    main {
        resources {
            srcDir rootProject.file("config/dev")
        }
    }
    test {
        resources {
            srcDir rootProject.file("config/test")
        }
    }
}

test {
    // enable TestNG support (default is JUnit)
    useTestNG() {
        useDefaultListeners = true
    }
    reports.html.enabled = true
}

//Module dependencies
dependencies {
    // Corda dependencies.
    testCompile "$corda_core_release_group:corda-test-utils:$corda_release_version"
    testCompile "net.corda:corda-node-driver:$corda_release_version"
    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testCompile "org.testng:testng:$testng_version"
    testCompile 'com.ea.agentloader:ea-agent-loader:1.0.3'

    cordaCompile "$corda_core_release_group:corda-core:$corda_core_release_version"
    cordaCompile "$corda_release_group:corda-node-api:$corda_release_version"
    cordaRuntime "$corda_release_group:corda:$corda_release_version"

    // CorDapp dependencies
    // Specify your CorDapp's dependencies below, including dependent CorDapps.
    cordapp project(":cordapp-supply-chain")
    cordapp project(":cordapp-contracts-states")

    cordaCompile "org.apache.logging.log4j:log4j-slf4j-impl:${log4j_version}"
    cordaCompile "org.apache.logging.log4j:log4j-web:${log4j_version}"
    cordaCompile "org.slf4j:jul-to-slf4j:$slf4j_version"
    cordaDriver "net.corda:corda-shell:$corda_release_version"

}


//Task to deploy the nodes in order to bootstrap a network
task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {
    directory "./build/nodes"
    /* This property will load the CorDapps to each of the node by default, including the Notary. You can find them
     * in the cordapps folder of the node at build/nodes/Notary/cordapps. However, the notary doesn't really understand
     * the notion of cordapps. In production, Notary does not need cordapps as well. This is just a short cut to load
     * the Corda network bootstrapper.
     */
    nodeDefaults {
        projectCordapp {
            deploy = false
        }
        cordapp project(':cordapp-contracts-states')
        cordapp project(':cordapp-supply-chain')
        runSchemaMigration = true //This configuration is for any CorDapps with custom schema, We will leave this as true to avoid
        //problems for developers who are not familiar with Corda. If you are not using custom schemas, you can change
        //it to false for quicker project compiling time.
    }
    node {
        name "O=Notary,L=51.50/-0.13/London,C=GB"
        notary = [validating : false]
        p2pAddress "notary:10010"
        rpcSettings {
            address("notary:10011")
            adminAddress("notary:10012")
        }
        sshdPort 2222
    }
    node {
        name "O=PartyA,OU=Manufacturer,L=47.38/8.54/Zurich,C=CH"
        p2pAddress "partya:10010"
        rpcSettings {
            address("partya:10011")
            adminAddress("partya:10012")
        }
        sshdPort 2222
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=PartyB,OU=Carrier,L=51.50/-0.13/London,C=US"
        p2pAddress "partyb:10010"
        rpcSettings {
            address("partyb:10011")
            adminAddress("partyb:10012")
        }
        sshdPort 2222
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=PartyC,OU=Warehouse,L=42.36/-71.06/Boston,C=US"
        p2pAddress "partyc:10010"
        rpcSettings {
            address("partyc:10011")
            adminAddress("partyc:10012")
        }
        sshdPort 2222
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=PartyD,OU=Store,L=40.73/-74/New York,C=US"
        p2pAddress "partyd:10010"
        rpcSettings {
            address("partyd:10011")
            adminAddress("partyd:10012")
        }
        sshdPort 2222
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
}

task deployWebapps(type: Copy, dependsOn: [
    'webserver-supply-chain:deployWebapp',
]) {
    ext.webappDir = file("build/webapps")

    from('webserver-supply-chain/build/webapp') { include '**/*.jar' }

    // this should be for each webmodule. such as :
    from("webserver-supply-chain/src/test/resources/scripts/") {
        filter {
            it.replace('#DIR#', ext.webappDir.getAbsolutePath())
        }
    }
    into ext.webappDir
}

sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
    }
}

publishing{
    publications {
        publishSupplychain(MavenPublication) {
            groupId 'com.supplychain.bcc'
            artifactId 'cordapp-supply-chain'
            version "${project.version}"
            artifact("cordapp-supply-chain/build/libs/cordapp-supply-chain-$version"+".jar")
        }
        publishContracts(MavenPublication) {
            groupId 'com.supplychain.bcc'
            artifactId 'cordapp-contracts-states'
            version "${project.version}"
            artifact("cordapp-contracts-states/build/libs/cordapp-contracts-states-$version"+".jar")
        }
    }
    repositories {
        maven {
            url = System.getenv("REPO_URL")
            credentials {
                username = System.getenv("REPO_USERNAME")
                password = System.getenv("REPO_PASSWORD")
            }
        }
    }
}
