##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

apiVersion: apps/v1
kind: Deployment
metadata:
    name: {{ .Release.Name }}
    {{- if .Values.metadata.deployment.annotations }}
    annotations:
{{ toYaml .Values.metadata.deployment.annotations | indent 8 }}
    {{- end }}
    namespace: {{ .Release.Namespace }}
    labels:
      app.kubernetes.io/name: {{ .Release.Name }}
      app.kubernetes.io/managed-by: {{ .Release.Service }}
      app.kubernetes.io/instance: {{ .Release.Name }}
spec:
    replicas: 1
    selector:
      matchLabels:
        app: {{ .Release.Name }}
        app.kubernetes.io/name: {{ .Release.Name }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    strategy:
      type: Recreate
      rollingUpdate: null
    template:
      metadata:
        labels:
          app: {{ .Release.Name }}
          app.kubernetes.io/name: {{ .Release.Name }}
          app.kubernetes.io/instance: {{ .Release.Name }} 
      spec:
        hostname: {{ .Release.Name }}
        securityContext:
          fsGroup: 1000
        containers:
        - name: corda-web
          image: {{ .Values.image.webserver }}
          imagePullPolicy: Always
          command: ["sh", "-c"]
          args:
          - |-
            #!/usr/bin/env sh
            cp /webserver-supply-chain-0.1.jar /opt/corda/app.jar;
            cd /opt/corda/;
            cat config/app.properties
                        
            # To run smart contract jar with springboot if it is provided 
            if [ -d "/opt/corda/cordapps" ]; then
              echo "Found the cordapps directory"
              ls -ltr /opt/corda/cordapps;
              java $JAVA_OPTIONS -cp app.jar -Dloader.path=/opt/corda/{{ .Values.smartContract.path }}/{{ .Values.smartContract.name }} org.springframework.boot.loader.PropertiesLauncher --spring.config.location=/opt/corda/config/app.properties 2>&1
            else
              echo "NO cordapps directory"
              java $JAVA_OPTIONS -jar app.jar --spring.config.location=/opt/corda/config/app.properties 2>&1
            fi
            exit 0
            break
          resources:
            limits:
              memory: {{ .Values.resources.limits }}
            requests:
              memory: {{ .Values.resources.requests }}
          ports:
            - containerPort: {{ .Values.web.port }}
              name: web
          env:
            - name: JAVA_OPTIONS
              value: {{ .Values.smartContract.JAVA_OPTIONS }}
            - name: CORDA_HOME
              value: "/opt/corda"
          volumeMounts:
          - name: {{ .Release.Name }}volume
            mountPath: "/opt/corda/"
            readOnly: false
          - name: nodeprops
            mountPath: "/opt/corda/config"
            readOnly: false
          - name: node-certs
            mountPath: "/opt/corda/certificates"
        initContainers:
        - name: create-properties
          image : {{ .Values.image.initContainer }}
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh","-c"]
          args:
          - |-
            #!/bin/bash
            # delete previously created app.properties, and create a new app.properties
            rm -f /opt/corda/config/app.properties;
            mkdir -p /opt/corda/config
            touch /opt/corda/config/app.properties;

            # create app.properties using values specified by user
            cat << EOF > /opt/corda/config/app.properties
            config.rpc.username={{ .Values.credentials.rpcUser }}
            config.rpc.password={{ .Values.credentials.rpcUserPassword }}
            config.rpc.host={{ .Values.nodeConf.node }}
            config.rpc.port={{ .Values.nodeConf.nodeRpcPort }}
            config.controller.name=Controller
            config.main.controller.name=MainController
            config.ssl.trustStorePath=/opt/corda/certificates/truststore.jks
            config.ssl.trustStorePassword={{ .Values.credentials.truststorePassword }}
            config.ssl.trustStoreProvider=jks
            config.legalName="{{ .Values.nodeConf.legalName }}"
            # Define a custom port instead of the default 8080
            server.port={{ .Values.web.port }}
            # Tell Spring Security (if used) to require requests over HTTPS
            security.require-ssl={{ .Values.nodeConf.useSSL }}
            # The format used for the keystore
            server.ssl.key-store-type=jks
            # The path to the keystore containing the certificate
            server.ssl.key-store=/opt/corda/certificates/sslkeystore.jks
            # The password used to generate the certificate
            server.ssl.key-store-password={{ .Values.credentials.keystorePassword }}
            # The alias mapped to the certificate
            server.ssl.key-alias=cordaclienttls
            EOF
          volumeMounts:
          - name: nodeprops
            mountPath: "/opt/corda/config"
        - name: init-downloadjars
          image: {{ .Values.image.initContainer }}
          imagePullPolicy: IfNotPresent
          command: ["sh", "-c"]
          args:
          - |-
               #!/usr/bin/env sh
               #Can be used to download any specific database drivers
          volumeMounts:
          - name: {{ .Release.Name }}volume
            mountPath: "/opt/corda"
            readOnly: false
        - name: node-healthcheck
          image: {{ .Values.image.initContainer }}
          imagePullPolicy: IfNotPresent
          command: ["sh", "-c"]
          args:
          - |-
            #!/usr/bin/env sh
            COUNTER=1
            FLAG=true
            while [ "$COUNTER" -le {{ $.Values.nodeConf.readinessThreshold }} ]
            do
              NODE={{ .Values.nodeConf.node }}:{{ .Values.nodeConf.nodeRpcPort }}
              STATUS=$(nc -vz $NODE 2>&1 | grep -c open )
              if [ "$STATUS" == 0 ]
              then
                FLAG=false
              else
                FLAG=true                
                echo "node up and running"
              fi   
              if [ "$FLAG" == false ]
              then                
                echo "Retry attempted $COUNTER times, retrying after {{ $.Values.nodeConf.readinessCheckInterval }} seconds"
                COUNTER=`expr "$COUNTER" + 1`
                sleep {{ $.Values.nodeConf.readinessCheckInterval }}			
              else
                echo "SUCCESS!"
                echo "node up and running!"
                exit 0
                break
              fi   
            done
            if [ "$COUNTER" -gt {{ $.Values.nodeConf.readinessThreshold }} ] || [ "$FLAG" == false ] 
            then
              echo "Retry attempted $COUNTER times, no node up and running. Giving up!"
              exit 1
              break
            fi
        imagePullSecrets:
          - name: {{ .Values.image.imagePullSecret }}
        volumes:
          - name: {{ .Release.Name }}volume
            persistentVolumeClaim:
              claimName: {{ .Release.Name }}-pvc
          - name: node-certs
            secret:
              secretName: {{ .Values.nodeConf.node }}-certs
          - name: nodeprops
            emptyDir:
              medium: Memory
