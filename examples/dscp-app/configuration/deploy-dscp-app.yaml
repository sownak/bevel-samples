##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

# This playbook deploys the supplychain apis and frontend to an existing DLT network
# The DLT network should already be created using the same configuration file as that
#   used for running this playbook.
---
# This will apply to ansible_provisioners. /etc/ansible/hosts should be configured with this group
- hosts: ansible_provisioners
  gather_facts: no
  no_log: "{{ no_ansible_log | default(false) }}"
  tasks:
  - include_role:
      name:  "{{ playbook_dir }}/../../../platforms/shared/configuration/roles/setup/flux"
    vars:
      kubeconfig_path: "{{ item.k8s.config_file }}"
      kubecontext: "{{ item.k8s.context }}"
      git_username: "{{ item.gitops.username }}"
      git_repo: "{{ item.gitops.git_repo }}"
      git_password: "{{ item.gitops.password }}"
      git_branch: "{{ item.gitops.branch }}"
      git_path: "{{ item.gitops.release_dir }}"
      git_host: "{{ item.gitops.git_repo.split('/')[0] | lower }}" # extract the hostname from the git_repo
      git_protocol: "{{ item.gitops.git_protocol | default('https') }}"
      git_url: "{{ item.gitops.git_url }}"
      git_key: "{{ item.gitops.private_key | default() }}"
      flux_version: "0.35.0"
    with_items: "{{ network.organizations }}" 
    
  # Setup letsencrypt cert-manager
  - name: "Setup cert-manager"
    include_role:
      name: "setup/certmanager"
    vars:
      kubeconfig_path: "{{ org.k8s.config_file }}"
      kubecontext: "{{ org.k8s.context }}"
    loop: "{{ network['organizations'] }}"
    loop_control:
      loop_var: org

  # Create certificate issuer service
  - name: "Creating certificate issuer service"
    include_role:
      name: "create/certissuer"
    vars:
      component_ns: "{{ org.name | lower }}-subs"
      kubeconfig_path: "{{ org.k8s.config_file }}"
      kubecontext: "{{ org.k8s.context }}"
      component_gitops: "{{ org.gitops }}"
      values_dir: "{{ playbook_dir }}/../../../{{ org.gitops.release_dir }}/{{ org.name | lower }}"
    loop: "{{ network['organizations'] }}"
    loop_control:
      loop_var: org

  # Create api values file for the dscp nodes
  - name: "Creating api values file for dscp nodes"
    include_role:
      name: "create/dscp/api"
    vars:
      component_ns: "{{ org.name | lower }}-subs"
      component_gitops: "{{ org.gitops }}"
      component_vault: "{{ org.vault }}"
      auth_type: "{{ org.auth.type }}"
      auth_jwksUri: "{{ org.auth.jwksUri }}"
      auth_audience: "{{ org.auth.audience }}"
      auth_issuer: "{{ org.auth.issuer }}"
      auth_tokenUrl: "{{ org.auth.tokenUrl }}"
      values_dir: "{{ playbook_dir }}/../../../{{ org.gitops.release_dir }}/{{ org.name | lower }}"
    loop: "{{ network['organizations'] }}"
    loop_control:
      loop_var: org
    when: 
      - network.type == 'substrate'

  # Create postgresql values file for the dscp-id-service and inteli-api
  - name: "Creating postgresql values file for dscp-id-service and inteli-api"
    include_role:
      name: "create/dscp/postgresql"
    vars:
      component_ns: "{{ org.name | lower }}-subs"
      component_gitops: "{{ org.gitops }}"
      values_dir: "{{ playbook_dir }}/../../../{{ org.gitops.release_dir }}/{{ org.name | lower }}"
    loop: "{{ network['organizations'] }}"
    loop_control:
      loop_var: org
    when: 
      - network.type == 'substrate'

  # Create dscp-identity-service values file for the dscp-id-service
  - name: "Creating dscp-identity-service values file for dscp-id-service"
    include_role:
      name: "create/dscp/id-service"
    vars:
      component_ns: "{{ org.name | lower }}-subs"
      component_gitops: "{{ org.gitops }}"
      component_vault: "{{ org.vault }}"
      auth_type: "{{ org.auth.type }}"
      auth_jwksUri: "{{ org.auth.jwksUri }}"
      auth_audience: "{{ org.auth.audience }}"
      auth_issuer: "{{ org.auth.issuer }}"
      auth_tokenUrl: "{{ org.auth.tokenUrl }}"
      values_dir: "{{ playbook_dir }}/../../../{{ org.gitops.release_dir }}/{{ org.name | lower }}"
    loop: "{{ network['organizations'] }}"
    loop_control:
      loop_var: org
    when: 
      - network.type == 'substrate'

  - name: "Creating values file for inteli-api"
    include_role:
      name: "create/dscp/inteli-api"
    vars:
      component_ns: "{{ org.name | lower }}-subs"
      component_gitops: "{{ org.gitops }}"
      external_suffix: "{{ org.external_url_suffix }}"
      auth_type: "{{ org.auth.type }}"
      auth_jwksUri: "{{ org.auth.jwksUri }}"
      auth_audience: "{{ org.auth.audience }}"
      auth_issuer: "{{ org.auth.issuer }}"
      auth_tokenUrl: "{{ org.auth.tokenUrl }}"
      values_dir: "{{ playbook_dir }}/../../../{{ org.gitops.release_dir }}/{{ org.name | lower }}"
    loop: "{{ network['organizations'] }}"
    loop_control:
      loop_var: org
    when: 
      - network.type == 'substrate'

  - name: "Creating values file for dscp-chain-watcher"
    include_role:
      name: "create/dscp/chain-watcher"
    vars:
      component_ns: "{{ org.name | lower }}-subs"
      component_gitops: "{{ org.gitops }}"
      values_dir: "{{ playbook_dir }}/../../../{{ org.gitops.release_dir }}/{{ org.name | lower }}"
      component_vault: "{{ org.vault }}"
    loop: "{{ network['organizations'] }}"
    loop_control:
      loop_var: org
    when: 
      - network.type == 'substrate'
  
  # Create frontend values file for the dscp nodes
  - name: "Creating frontend values file for dscp nodes"
    include_role:
      name: "create/dscp/frontend"
    vars:
      component_ns: "{{ org.name | lower }}-subs"
      component_gitops: "{{ org.gitops }}"
      component_vault: "{{ org.vault }}"
      values_dir: "{{ playbook_dir }}/../../../{{ org.gitops.release_dir }}/{{ org.name | lower }}"
    loop: "{{ network['organizations'] }}"
    loop_control:
      loop_var: org
    when: 
      - network.type == 'substrate' 

  # Add Flux V2 Image automation
  - name: Setup flux automation for the images
    include_role: 
      name: "setup/fluxautomation"
    loop: "{{ network['organizations'] }}"
    loop_control:
      loop_var: org
    when: 
    - docker.autodeploy is defined
  
  vars: #These variables can be overriden from the command line
    install_os: "linux"           # Default to linux OS
    install_arch:  "amd64"        # Default to amd64 architecture
    bin_install_dir:  "~/bin"     # Default to /bin install directory for binaries
