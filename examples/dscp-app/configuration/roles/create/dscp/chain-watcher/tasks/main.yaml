##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################
# Store gcp key into vault
- name: "Store gcp key in vault"
  shell: |
     vault kv put {{ component_vault.secret_path | default('secretsv2') }}/{{ component_ns }}/gcpkey gcpkey="$(cat {{ org.kinaxis.keyPath }})" 
  environment:
    VAULT_ADDR: "{{ component_vault.url }}"
    VAULT_TOKEN: "{{ component_vault.root_token }}"
  when: org.kinaxis is defined

  # Store inteli-api auth0 keys into vault
- name: "Store inteli-api auth0 keys in vault"
  shell: |
     vault kv put {{ component_vault.secret_path | default('secretsv2') }}/{{ component_ns }}/inteliAuth clientId="{{ org.auth.clientId }}" clientSecret="{{ org.auth.secret }}"
  environment:
    VAULT_ADDR: "{{ component_vault.url }}"
    VAULT_TOKEN: "{{ component_vault.root_token }}"
  when: 
  - org.auth is defined
  - org.auth.type == 'JWT'

# Create chain-watcher values file for oem node
- name: "Create chain-watcher values file for oem peer"
  include_role:
    name: helm_component
  vars:
    type: "dscp-chain-watcher"
    component_name: "{{ peer.name }}-chain-watcher"
    name: "{{ peer.name }}"
    charts_dir: "examples/dscp-app/charts"
    dscp_api_addr: "{{ peer.name }}-api"
    db_host_addr: "{{ peer.name }}-postgresql"
    fetch_gcp_key: "true"
  loop: "{{ org.services.peers }}"
  loop_control:
    loop_var: peer
  when: (peer.postgresql is defined) and (peer.inteli_api is defined) and (org.kinaxis is defined)

# Create chain-watcher values file for all other peer nodes
- name: "Create chain-watcher values file for all other peers"
  include_role:
    name: helm_component
  vars:
    type: "dscp-chain-watcher"
    component_name: "{{ peer.name }}-chain-watcher"
    name: "{{ peer.name }}"
    charts_dir: "examples/dscp-app/charts"
    dscp_api_addr: "{{ peer.name }}-api"
    db_host_addr: "{{ peer.name }}-postgresql"
    fetch_gcp_key: "false"
  loop: "{{ org.services.peers }}"
  loop_control:
    loop_var: peer
  when: (peer.postgresql is defined) and (peer.inteli_api is defined) and (org.kinaxis is not defined)

# Push the chain-watcher deployment files to repository
- name: "Push the created deployment files to repository"
  include_role: 
    name: "{{ playbook_dir }}/../../../platforms/shared/configuration/roles/git_push"
  vars:
    GIT_DIR: "{{ playbook_dir }}/../../../"
    gitops: "{{ component_gitops }}"
    GIT_RESET_PATH: "examples/dscp-app/configuration"
    msg: "[ci skip] Pushing deployment files for chain-watcher"
